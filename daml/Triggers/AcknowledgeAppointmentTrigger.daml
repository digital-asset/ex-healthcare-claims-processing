--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Triggers.AcknowledgeAppointmentTrigger where

import Daml.Trigger
import DA.Next.Map qualified as Maps

import Main.Provider
import Main.Policy
import Triggers.ContractUtils
import DA.Foldable (forA_)

acknowledgeAppointmentTrigger : Trigger ()
acknowledgeAppointmentTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = acknowledgeAppointments
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @NotifyPayer
    ]
  , heartbeat = None
  }

acknowledgeAppointments : Party -> ACS -> Time -> Maps.Map CommandId [Command] -> () -> TriggerA ()
acknowledgeAppointments party activeContracts _ _ () = do
  let
    notifications = getContracts @NotifyPayer activeContracts
    policies = getContracts @InsurancePolicy activeContracts

  forA_
    [ (notification, find (hasSamePatient notification) policies) | notification <- notifications]
    acknowledgeAndLock
  where
    acknowledgeAndLock (notification, Some policy) =
      (fst notification) `dedupExercise` AcknowledgeAndLock (fst policy)
    acknowledgeAndLock _ = pure ()

hasSamePatient: Contract NotifyPayer -> Contract InsurancePolicy -> Bool
hasSamePatient (_, notification) (_, policy) = notification.patient == policy.patient
