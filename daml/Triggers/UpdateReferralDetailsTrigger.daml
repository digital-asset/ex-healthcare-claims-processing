--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Triggers.UpdateReferralDetailsTrigger where

import Test.ReferenceData
import Test.Patient
import Daml.Trigger
import DA.Next.Map qualified as Maps
import DA.Foldable hiding (length)
import DA.Optional
import Daml.Trigger.Assert
import DA.Assert
import Main.Provider
import Main.Referral
import DA.Action
import Main.RuleTypes
import Test.Triggers.TriggerTestUtils

updateReferralDetailsTrigger : Trigger ()
updateReferralDetailsTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = updateReferralDetailsRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @Referral,
      registeredTemplate @ReferralDetails
    ]
  , heartbeat = None
  }

updateReferralDetailsRule : Party -> ACS -> Time -> Maps.Map CommandId [Command] -> () -> TriggerA ()
updateReferralDetailsRule party activeContracts _ _ () =
  forA_ referralDetailsList $ \(referralDetailsCid, referralDetails) ->
    when (referralDetails.renderingProvider == party &&
          isNone referralDetails.referralDetails.referral) $
      addCommandIfEncounterIdsMatch referralDetailsCid referralDetails
 where
  referralList = getContracts @Referral activeContracts
  referralDetailsList = getContracts @ReferralDetails activeContracts
  addCommandIfEncounterIdsMatch referralDetailsCid referralDetails =
    forA_ referralList $ \(referralCid, referral) ->
      when (referralDetails.referralDetails.encounterDetails.encounterId
              == referral.encounterDetails.encounterId) $
        dedupExercise referralDetailsCid $ UpdateReferralDetails with
          referralCid = referralCid

-- Tests ---------------------------

testReferralDetailsGetUpdated: Scenario ()
testReferralDetailsGetUpdated = scenario do
  provider2 <- getParty "Specialist"
  (referralCid, referralDetails) <- referralTest

  let activeContracts =
        toACS referralDetails <>
        toACS referralCid
  commands <-
    testTrigger updateReferralDetailsTrigger provider2 activeContracts

  length commands === 1
  assertExerciseCmd commands $ \(cid, choiceArg) -> do
    assertEq cid referralDetails
    assertEq choiceArg $ UpdateReferralDetails with
        referralCid = referralCid

testNoUpdateIfNoReferral: Scenario ()
testNoUpdateIfNoReferral = scenario do
  provider2 <- getParty "Specialist"
  (referralCid, _referralDetails) <- referralTest

  let activeContracts =
        toACS referralCid
  commands <-
    testTrigger updateReferralDetailsTrigger provider2 activeContracts

  length commands === 0

-- Utils

referralTest = scenario do
  patientScenario <- onboardPatient
  provider1 <- getParty "PrimaryCareProvider"
  provider2 <- getParty "Specialist"

  let onboard = patientScenario.onboardResult
      provider1Role = onboard.provider1Role
      provider2NetworkContract = onboard.provider2NetworkContract
      policyCid = patientScenario.disclosedPolicyCid
      ruleParams =
        RuleParameters with
          policy = policyCid
          encounterDetails = patient1Encounter
          networkContract = provider2NetworkContract
          referral = None


  referralReq <- provider1 `submit` do
    exercise provider1Role CreateReferral with
      receiver = provider2
      policy = ruleParams.policy
      encounterId = ruleParams.encounterDetails.encounterId
      procedureCode = ruleParams.encounterDetails.procedureCode
      diagnosisCode = ruleParams.encounterDetails.diagnosisCode
      siteServiceCode = ruleParams.encounterDetails.siteServiceCode
      appointmentPriority = ruleParams.encounterDetails.appointmentPriority

  Right refOutput <- provider2 `submit` do
    exercise referralReq EvaluateReferral with
      networkContractCid = provider2NetworkContract

  pure refOutput
