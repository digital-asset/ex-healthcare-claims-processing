--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Triggers.EvaluateReferralTrigger where

import Daml.Trigger
import DA.Next.Map qualified as Maps

import Main.Provider
import Main.NetworkContract
import Triggers.ContractUtils (headNote)
import DA.Foldable (forA_)

evaluateReferralTrigger : Trigger ()
evaluateReferralTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = evaluateReferrals
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @ReferralRequest
    ]
  , heartbeat = None
  }

evaluateReferrals : Party -> ACS -> Time -> Maps.Map CommandId [Command] -> () -> TriggerA ()
evaluateReferrals party activeContracts _ _ () = do
  let
    requests = map fst $ getContracts @ReferralRequest activeContracts
    (networkContract, _) =
      headNote
        "Every provider should have exactly one network contract"
        (getContracts @ProviderNetworkContract activeContracts)

  forA_ requests (`dedupExercise` EvaluateReferral networkContract)
