--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Triggers.AcknowledgeAndDiscloseTrigger where

import Test.ReferenceData
import Test.Referral
import Daml.Trigger
import DA.Next.Map qualified as Maps
import DA.Foldable hiding (length)
import DA.Optional
import Daml.Trigger.Assert
import DA.Assert
import Main.Policy
import Main.Provider
import Triggers.ContractUtils
import DA.List.Total
import DA.Either
import Test.Triggers.TriggerTestUtils

acknowledgeAndDiscloseTrigger : Trigger ()
acknowledgeAndDiscloseTrigger = Trigger
  { initialize = const ()
  , updateState = \_ _ _ -> ()
  , rule = acknowledgeAndDiscloseRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @DisclosureRule,
      registeredTemplate @InsurancePolicy,
      registeredTemplate @NotifyPatient
    ]
  , heartbeat = None
  }

acknowledgeAndDiscloseRule : Party -> ACS -> Time -> Maps.Map CommandId [Command] -> () -> TriggerA ()
acknowledgeAndDiscloseRule _party activeContracts _ _ () =
  whenSome maybeDisclosureRule $
    \(_, disclosureRule) ->
      forA_ notifyPatientContracts $ \(npCid, notifyPatient) -> do
        let selectedPolicyOpt =
              head $ filterContractIds
                (\p -> p.patient == notifyPatient.patient)
                insurancePolicies
        whenSome selectedPolicyOpt $ \selectedPolicy ->
          dedupExercise npCid $ AcknowledgeAndDisclose with
            policyCid = selectedPolicy
            receivers = disclosureRule.receivers
 where
  insurancePolicies = getContracts @InsurancePolicy activeContracts
  notifyPatientContracts = getContracts @NotifyPatient activeContracts
  maybeDisclosureRule = head $ getContracts @DisclosureRule activeContracts

-- Tests ---------------------------

testNotificationAcknowledgedAndDisclosed: Scenario ()
testNotificationAcknowledgedAndDisclosed = scenario do
  patient1 <- getParty "John Doe"
  provider1 <- getParty "PrimaryCareProvider"
  provider2 <- getParty "Specialist"
  (updatedPolicy, notifyPatient, dRule) <- appointmentTest

  let activeContracts =
          toACS updatedPolicy <>
          toACS notifyPatient <>
          toACS dRule
  commands <-
    testTrigger acknowledgeAndDiscloseTrigger patient1 activeContracts

  length commands === 1
  assertExerciseCmd commands $ \(cid, choiceArg) -> do
    assertEq cid notifyPatient
    assertEq choiceArg $ AcknowledgeAndDisclose with
        policyCid = updatedPolicy
        receivers = [provider1, provider2]

testNoNotificationAcknowledgedAndDisclosedWhenNoPolicy: Scenario ()
testNoNotificationAcknowledgedAndDisclosedWhenNoPolicy = scenario do
  patient1 <- getParty "John Doe"
  (_updatedPolicy, notifyPatient, dRule) <- appointmentTest

  let activeContracts =
          toACS notifyPatient <>
          toACS dRule
  commands <-
    testTrigger acknowledgeAndDiscloseTrigger patient1 activeContracts

  length commands === 0

testNoNotification: Scenario ()
testNoNotification = scenario do
  patient1 <- getParty "John Doe"

  dRule <- patient1 `submit`
      create DisclosureRule with
          operator = patient1
          owner = patient1
          receivers = []

  let activeContracts = toACS dRule
  commands <-
    testTrigger acknowledgeAndDiscloseTrigger patient1 activeContracts

  length commands === 0

-- Utils

appointmentTest = scenario do
  referralScenario <- referralTest
  operator <- getParty "Operator"
  payer1 <- getParty "Insurance Company"
  provider1 <- getParty "PrimaryCareProvider"
  provider2 <- getParty "Specialist"
  patient1 <- getParty "John Doe"

  let provider2Role = referralScenario.provider2Role
      appointmentDetails = referralScenario.ruleParameters
      referralDetails = referralScenario.referralDetails
      originalPolicy = referralScenario.originalPolicy
      disclosureList = [provider1, provider2]

  dRule <- patient1 `submit`
      create DisclosureRule with
          operator = operator
          owner = patient1
          receivers = disclosureList

  appointmentCid <- provider2 `submit` do
    scheduleResult <- exercise referralDetails ScheduleAppointment with
      appointmentDate = patient1_appointmentTime
    return $ fromSome $ eitherToOptional $ scheduleResult

  (updatePolicy, notifyPatient) <- payer1 `submit`
    exercise (snd appointmentCid) AcknowledgeAndLock with policyCid = originalPolicy

  pure (updatePolicy, notifyPatient, dRule)
