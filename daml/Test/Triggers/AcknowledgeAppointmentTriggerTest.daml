--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2

module Test.Triggers.AcknowledgeAppointmentTriggerTest where

import Main.Provider

import Test.Referral
import Test.ReferenceData
import DA.Optional
import DA.Either
import Triggers.AcknowledgeAppointmentTrigger
import Daml.Trigger.Assert (assertExerciseCmd, toACS)
import DA.Assert ((===))

import Test.Triggers.TriggerTestUtils

testAppointmentAcknowledgedAndLocked: Scenario ()
testAppointmentAcknowledgedAndLocked = scenario do
  payer <- getParty "Insurance Company"
  (updatedPolicy, notifyPatient) <- appointmentTest

  let activeContracts =
        toACS updatedPolicy <>
        toACS notifyPatient

  commands <- testTrigger acknowledgeAppointmentTrigger payer activeContracts

  1 === length commands
  let expectedChoice = AcknowledgeAndLock with policyCid = updatedPolicy
  assertExerciseCmd commands $ \(contract, actualChoice) -> do
    notifyPatient === contract
    expectedChoice === actualChoice

testNoAcknowledgedAndLockWhenNoPolicy: Scenario ()
testNoAcknowledgedAndLockWhenNoPolicy = scenario do
  payer <- getParty "Insurance Company"
  (_, notifyPatient) <- appointmentTest

  let activeContracts = toACS notifyPatient

  commands <- testTrigger acknowledgeAppointmentTrigger payer activeContracts

  assertMsg "Expected no commands." $ null commands

testNoNotification: Scenario ()
testNoNotification = scenario do
  payer <- getParty "Insurance Company"

  let activeContracts = mempty

  commands <- testTrigger acknowledgeAppointmentTrigger payer activeContracts

  assertMsg "Expected no commands." $ null commands

appointmentTest = scenario do
  referralScenario <- referralTest
  operator <- getParty "Operator"
  payer1 <- getParty "Insurance Company"
  provider1 <- getParty "PrimaryCareProvider"
  provider2 <- getParty "Specialist"
  payer <- getParty "John Doe"

  let provider2Role = referralScenario.provider2Role
      appointmentDetails = referralScenario.ruleParameters
      referralDetails = referralScenario.referralDetails
      originalPolicy = referralScenario.originalPolicy
      disclosureList = [provider1, provider2]

  appointmentCid <- provider2 `submit` do
    scheduleResult <- exercise referralDetails ScheduleAppointment with
      appointmentDate = patient1_appointmentTime
    return $ fromSome $ eitherToOptional $ scheduleResult

  pure (originalPolicy, snd appointmentCid)
