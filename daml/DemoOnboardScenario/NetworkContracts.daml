--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--

daml 1.2 module DemoOnboardScenario.NetworkContracts where

import Main.Provider
import Main.Payer
import Main.NetworkContract
import DemoOnboardScenario.Onboard qualified as O
import DemoOnboardScenario.ReferenceData qualified as Ref


requestNetworkContract
    (provider: Party)
    (providerRole: ContractId Provider)
    : Scenario (ContractId ProviderRequestsPayer) = do
  payer1 <- Ref.payer1_party
  provider `submit` do
    exercise providerRole RequestNetworkContract with payer = payer1

acceptNetworkContractRequest
    (payerRole: ContractId Payer)
    (providerRequest: ContractId ProviderRequestsPayer)
    : Scenario (ContractId ProviderNetworkContract) = do
  payer1 <- Ref.payer1_party
  payer1 `submit` do
    exercise providerRequest AcceptNetworkContractRequest with
      payerCid = payerRole
      feeSchedule = Ref.feeSchedule

data NetworkContractSet = NetworkContractSet
  with
    onboard: O.OnboardData
    provider1NetworkContract: ContractId ProviderNetworkContract
    provider2NetworkContract: ContractId ProviderNetworkContract
  deriving (Eq, Show)

networkContractsSet = scenario
  do
    onb <- O.onboard

    provider1 <- Ref.provider1_party      
    provider1Request <- requestNetworkContract provider1 onb.provider1Role
    provider1NetworkContract <-
      acceptNetworkContractRequest onb.payerRole provider1Request

    provider2 <- Ref.provider2_party
    provider2Request <- requestNetworkContract provider2 onb.provider2Role
    provider2NetworkContract <-
      acceptNetworkContractRequest onb.payerRole provider2Request

    return $ NetworkContractSet onb provider1NetworkContract provider2NetworkContract
