--
-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
--



module Triggers.AcceptPatientPaymentRequestTrigger where

import Main.Claim
import Daml.Script (Script, script)
import Daml.Trigger
import DA.Foldable hiding (length)
import Daml.Trigger.Assert
import DA.Assert
import DemoOnboardScenario.Treatment
import DemoOnboardScenario.ReferenceData
import Test.Triggers.TriggerTestUtils

acceptPatientPaymentRequestTrigger : Trigger ()
acceptPatientPaymentRequestTrigger = Trigger
  { initialize = pure ()
  , updateState = \_ -> pure ()
  , rule = acceptPatientPaymentRequestRule
  , registeredTemplates = RegisteredTemplates [
      registeredTemplate @PatientPaymentRequest
    ]
  , heartbeat = None
  }

acceptPatientPaymentRequestRule : Party -> TriggerA () ()
acceptPatientPaymentRequestRule _party = do
  claimRequests <- query @PatientPaymentRequest
  forA_ claimRequests $ \(patientPaymentRequestCid, _patientPaymentRequest) ->
    dedupExercise patientPaymentRequestCid AcceptPatientObligation

-- Tests ---------------------------

testPatientPaymentRequestAccepted: Script ()
testPatientPaymentRequestAccepted = script do
  parties@Parties{..} <- allocateParties
  treatmentScenario <- treatmentTest parties

  let activeContracts =
          toACS treatmentScenario.paymentReq11.patientReq
  commands <-
    testTrigger acceptPatientPaymentRequestTrigger patient1 activeContracts

  length commands === 1
  assertExerciseCmd commands $ \(cid, choiceArg) -> do
    assertEq cid treatmentScenario.paymentReq11.patientReq
    assertEq choiceArg AcceptPatientObligation

testNoPatientPaymentRequest: Script ()
testNoPatientPaymentRequest = script do
  Parties{patient1} <- allocateParties

  let activeContracts = mempty
  commands <-
    testTrigger acceptPatientPaymentRequestTrigger patient1 activeContracts

  length commands === 0
